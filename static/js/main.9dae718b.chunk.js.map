{"version":3,"sources":["components/Cards/Cards.module.css","api.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","images/image.png","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Cards","console","log","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","setData","setCountry","image","src","alt","CountryPicker","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9dae718b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1tftk\",\"card\":\"Cards_card__1nrx6\",\"infected\":\"Cards_infected__NSuIw\",\"recovered\":\"Cards_recovered__1Lxkr\",\"deaths\":\"Cards_deaths__3V5zy\"};","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};","import React from \"react\";\r\nimport { Card, Typography, Grid, CardContent } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport styles from \"./Cards.module.css\";\r\nimport cx from \"classnames\";\r\n\r\nexport default function Cards({ confirmed, recovered, deaths, lastUpdate }) {\r\n  console.log(confirmed);\r\n\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={3}\r\n          component={Card}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.75}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of active cases of COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={3}\r\n          component={Card}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.75}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of recoveries from COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={3}\r\n          component={Card}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.75}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of deaths caused by COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport { fetchDailyData } from \"../../api\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const lineChart = dailyData[0] ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React, { useEffect, useState } from 'react';\nimport styles from './App.module.css';\nimport axios from 'axios'\nimport image from './images/image.png';\n// import Cards from './components/Cards/Cards'\n// import Chart from './components/Chart/Chart'\n// import CountryPicker from './components/CountryPicker/CountryPicker'\nimport { fetchData } from './api';\nimport { Cards, Chart, CountryPicker } from \"./components\"\n\nfunction App() {\n  const [data, setData] = useState({});\n  const [country, setCountry] = useState('')\n\n  async function handleCountryChange(country) {\n    const data = await fetchData(country);\n\n    setCountry(country);\n    setData(data)\n  }\n\n  useEffect(() => {\n\n    const url = \"https://covid19.mathdro.id/api\";\n\n    async function fetchData() {\n      try {\n        // const response = await axios.get(url);\n        // const modifiedData = {\n        //   confirmed: response.data.confirmed,\n        //   recovered: response.data.recovered,\n        //   deaths: response.data.deaths,\n        //   lastUpdate: response.data.lastUpdate\n        // }\n\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(url);\n        const modifiedData = { confirmed, recovered, deaths, lastUpdate };\n        setData(modifiedData);\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n    fetchData();\n  }, [])\n\n\n  return (\n    <div className={styles.container}>\n      <img className={styles.image} src={image} alt=\"COVID-19\" />\n      <Cards {...data} />\n      <CountryPicker handleCountryChange={handleCountryChange} />\n      <Chart data={data} country={country} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__19hId\",\"image\":\"App_image__SPhN0\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1rS3v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__140Wc\"};"],"sourceRoot":""}